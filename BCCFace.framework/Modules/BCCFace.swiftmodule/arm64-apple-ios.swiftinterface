// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BCCFace
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
@_exported import BCCFace
import CoreMotion
import DeveloperToolsSupport
import Foundation
import Lottie
import MLKit
import Photos
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class BCCFaceApi {
  @available(*, deprecated, message: "Create a LivenessDetectionViewController directly instead (do not forget to set its delegate).")
  public static func getNewLivenessDetection(delegate: any BCCFace.LivenessDetectionViewControllerDelegate, livenessParameters: BCCFace.LivenessParameters, detectionParameters: BCCFace.FaceDetectionParameters? = nil, speechSettings: BCCFace.SpeechSettings? = SpeechSettings(), language: BCCFace.BCCLanguages? = .deviceLanguage) -> BCCFace.LivenessDetectionViewController
  public static var bundle: Foundation.Bundle {
    get
  }
  public static var shortVersion: Swift.String {
    get
  }
  public static var longVersion: Swift.String {
    get
  }
  @objc deinit
}
public protocol LivenessDetectionViewControllerDelegate {
  func livenessDetectionDidFinish(viewController: BCCFace.LivenessDetectionViewController, with photoTaken: UIKit.UIImage, croppedFaceImage: UIKit.UIImage?, qualityScore: Swift.Float, allPhotos: [UIKit.UIImage])
  func livenessDetectionDidAbort(viewController: BCCFace.LivenessDetectionViewController)
  func livenessDetectionDidStartTest(viewController: BCCFace.LivenessDetectionViewController, testIndex: Swift.Int)
}
public protocol BCCFaceDelegate {
  func faceCaptureDidFinish(data: BCCFace.BCCFaceReturnData, analytics: BCCFace.BCCFaceAnalytics)
  func faceCaptureDidAbort(analytics: BCCFace.BCCFaceAnalytics)
}
extension BCCFace.LivenessDetectionViewControllerDelegate {
  public func livenessDetectionDidStartTest(viewController: BCCFace.LivenessDetectionViewController, testIndex: Swift.Int)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LivenessDetectionViewController : BCCFace.SwiftyCamViewController {
  public enum FaceFeedbackState : Swift.String {
    case NO_FACE
    case ANIMATING
    case HAS_FACE
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static let APPEARING_DELAY: Swift.Double
  @_Concurrency.MainActor(unsafe) public static let CIRCLE_FRAME_DELAY: Swift.Double
  @_Concurrency.MainActor(unsafe) public static let TEST_ADVANCE_DELAY: Swift.Double
  @_Concurrency.MainActor(unsafe) public var livenessParameters: BCCFace.LivenessParameters?
  @_Concurrency.MainActor(unsafe) public var speechSettings: BCCFace.SpeechSettings?
  @_Concurrency.MainActor(unsafe) public var cameraSettings: BCCFace.CameraSettings
  @_Concurrency.MainActor(unsafe) public var language: BCCFace.BCCLanguages?
  @_Concurrency.MainActor(unsafe) public var delegate: (any BCCFace.LivenessDetectionViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var analytics: BCCFace.BCCFaceAnalytics {
    get
  }
  @available(*, deprecated, message: "Create capture process using BCCFaceBuilder instead")
  @_Concurrency.MainActor(unsafe) public init(livenessParameters: BCCFace.LivenessParameters, detectionParameters: BCCFace.FaceDetectionParameters? = nil, speechSettings: BCCFace.SpeechSettings? = SpeechSettings(), cameraSettings: BCCFace.CameraSettings = .defaultCameraSettings, language: BCCFace.BCCLanguages? = nil)
  @_Concurrency.MainActor(unsafe) public func setEyesCheckEnable(_ enable: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func switchToManualCapture()
  @_Concurrency.MainActor(unsafe) public func switchToAutoCapture()
  @objc deinit
}
extension BCCFace.LivenessDetectionViewController : BCCFace.SwiftyCamViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didTake photo: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func swiftyCamSessionDidStopRunning(_ swiftyCam: BCCFace.SwiftyCamViewController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CircleFrameView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var alphaWhenHidden: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var alphaWhenShown: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var hidingTime: Swift.Double
  @_Concurrency.MainActor(unsafe) public var showingTime: Swift.Double
  @_Concurrency.MainActor(unsafe) public var canAnimate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, borderWidth: CoreFoundation.CGFloat, borderColor: UIKit.UIColor, frameSize: CoreFoundation.CGSize, backgroundColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setInvisible()
  @_Concurrency.MainActor(unsafe) public func setVisible()
  @_Concurrency.MainActor(unsafe) public func setBorderColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setBorderAlpha(_ alpha: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setBackgroundAlpha(_ alpha: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setOverallAlpha(_ alpha: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func hideAnimated(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showAnimated(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwiftyCamViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  public enum CameraSelection : Swift.String {
    case rear
    case front
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FlashMode {
    case auto
    case on
    case off
    public static func == (a: BCCFace.SwiftyCamViewController.FlashMode, b: BCCFace.SwiftyCamViewController.FlashMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum VideoQuality {
    case high
    case medium
    case low
    case resolution352x288
    case resolution640x480
    case resolution1280x720
    case resolution1920x1080
    case resolution3840x2160
    case iframe960x540
    case iframe1280x720
    public static func == (a: BCCFace.SwiftyCamViewController.VideoQuality, b: BCCFace.SwiftyCamViewController.VideoQuality) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public var cameraDelegate: (any BCCFace.SwiftyCamViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) public var maximumVideoDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) public var videoQuality: BCCFace.SwiftyCamViewController.VideoQuality
  @available(*, deprecated, message: "use flashMode .on or .off")
  @_Concurrency.MainActor(unsafe) public var flashEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var flashMode: BCCFace.SwiftyCamViewController.FlashMode
  @_Concurrency.MainActor(unsafe) public var pinchToZoom: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var maxZoomScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var tapToFocus: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var lowLightBoost: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var allowBackgroundAudio: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var doubleTapCameraSwitch: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var swipeToZoom: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var swipeToZoomInverted: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var defaultCamera: BCCFace.SwiftyCamViewController.CameraSelection
  @_Concurrency.MainActor(unsafe) public var shouldUseDeviceOrientation: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowAutoRotate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var videoGravity: BCCFace.SwiftyCamVideoGravity {
    get
  }
  @_Concurrency.MainActor(unsafe) public var audioEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var shouldPrompToAppSettings: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var outputFolder: Swift.String
  @_Concurrency.MainActor(unsafe) public var pinchGesture: UIKit.UIPinchGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var panGesture: UIKit.UIPanGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isVideoRecording: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isSessionRunning: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentCamera: BCCFace.SwiftyCamViewController.CameraSelection {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let session: AVFoundation.AVCaptureSession
  @_Concurrency.MainActor(unsafe) public var shouldRecordVideo: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var videoCodecType: AVFoundation.AVVideoCodecType?
  @_Concurrency.MainActor(unsafe) public func setPreviewView(view: BCCFace.PreviewView)
  @_Concurrency.MainActor(unsafe) public func setVideoGravity(gravity: BCCFace.SwiftyCamVideoGravity)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func getPreviewLayer() -> AVFoundation.AVCaptureVideoPreviewLayer
  @_Concurrency.MainActor(unsafe) public func takePhoto()
  @_Concurrency.MainActor(unsafe) public func startVideoRecording()
  @_Concurrency.MainActor(unsafe) public func stopVideoRecording()
  @_Concurrency.MainActor(unsafe) public func switchCamera()
  @_Concurrency.MainActor(unsafe) public func getUIImageFrom(sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func toggleFlash()
}
extension BCCFace.SwiftyCamViewController : BCCFace.SwiftyCamButtonDelegate {
  @_Concurrency.MainActor(unsafe) public func setMaxiumVideoDuration() -> Swift.Double
  @_Concurrency.MainActor(unsafe) public func buttonWasTapped()
  @_Concurrency.MainActor(unsafe) public func buttonDidBeginLongPress()
  @_Concurrency.MainActor(unsafe) public func buttonDidEndLongPress()
  @_Concurrency.MainActor(unsafe) public func longPressDidReachMaximumDuration()
}
extension BCCFace.SwiftyCamViewController : AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
}
extension BCCFace.SwiftyCamViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension UIKit.UIImage {
  public func normalize() -> UIKit.UIImage?
}
public class FaceDetectionUtils {
  public init()
  public func hasFace(from sampleBuffer: CoreMedia.CMSampleBuffer, with position: AVFoundation.AVCaptureDevice.Position, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc public class TextToSpeechManager : ObjectiveC.NSObject {
  public init(speechParameters: BCCFace.SpeechSettings, speakingListener: ((Swift.Bool) -> Swift.Void)?)
  public func isRunning() -> Swift.Bool
  public func toggleSpeaker()
  public func speak(text: Swift.String)
  public func mute()
  @objc deinit
}
extension BCCFace.TextToSpeechManager : AVFAudio.AVSpeechSynthesizerDelegate {
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didStart utterance: AVFAudio.AVSpeechUtterance)
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didFinish utterance: AVFAudio.AVSpeechUtterance)
}
public class BCCFaceBuilder {
  public init(_ rootViewController: UIKit.UIViewController, delegate: (any BCCFace.BCCFaceDelegate)?)
  public func buildSmileCheck(with smileProbability: Swift.ClosedRange<Swift.Float> = 0.5...1.0) -> BCCFace.BCCFaceBuilder
  public func removeSmileCheck() -> BCCFace.BCCFaceBuilder
  public func removeHeadRotation() -> BCCFace.BCCFaceBuilder
  public func setEyesOpenProbability(_ probability: Swift.ClosedRange<Swift.Float>) -> BCCFace.BCCFaceBuilder
  public func buildRotationCheck(_ rotationChecks: [BCCFace.HeadRotationCheck], headRotationAngle: Swift.ClosedRange<Swift.Float> = -6.0...6.0) -> BCCFace.BCCFaceBuilder
  public func buildSpeechSettings(_ speechSettings: BCCFace.SpeechSettings) -> BCCFace.BCCFaceBuilder
  public func buildCameraSettings(_ cameraSettings: BCCFace.CameraSettings) -> BCCFace.BCCFaceBuilder
  public func setInstructionEnable(_ enable: Swift.Bool) -> BCCFace.BCCFaceBuilder
  public func setReviewEnable(_ enable: Swift.Bool) -> BCCFace.BCCFaceBuilder
  public func removeSpeech() -> BCCFace.BCCFaceBuilder
  public func resetCameraSettings() -> BCCFace.BCCFaceBuilder
  public func forceLanguage(_ language: BCCFace.BCCLanguages) -> BCCFace.BCCFaceBuilder
  public func reset() -> BCCFace.BCCFaceBuilder
  public func initializeCapture(_ navController: UIKit.UINavigationController? = nil)
  @objc deinit
}
extension BCCFace.BCCFaceBuilder : BCCFace.BCCFaceDelegate {
  public func faceCaptureDidFinish(data: BCCFace.BCCFaceReturnData, analytics: BCCFace.BCCFaceAnalytics)
  public func faceCaptureDidAbort(analytics: BCCFace.BCCFaceAnalytics)
}
public protocol SwiftyCamViewControllerDelegate : AnyObject {
  func swiftyCamSessionDidStartRunning(_ swiftyCam: BCCFace.SwiftyCamViewController)
  func swiftyCamSessionDidStopRunning(_ swiftyCam: BCCFace.SwiftyCamViewController)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didTake photo: UIKit.UIImage)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didBeginRecordingVideo camera: BCCFace.SwiftyCamViewController.CameraSelection)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFinishRecordingVideo camera: BCCFace.SwiftyCamViewController.CameraSelection)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFinishProcessVideoAt url: Foundation.URL)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFailToRecordVideo error: any Swift.Error)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didSwitchCameras camera: BCCFace.SwiftyCamViewController.CameraSelection)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFocusAtPoint point: CoreFoundation.CGPoint)
  func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didChangeZoomLevel zoom: CoreFoundation.CGFloat)
  func swiftyCamDidFailToConfigure(_ swiftyCam: BCCFace.SwiftyCamViewController)
  func swiftyCamNotAuthorized(_ swiftyCam: BCCFace.SwiftyCamViewController)
}
extension BCCFace.SwiftyCamViewControllerDelegate {
  public func swiftyCamSessionDidStopRunning(_ swiftyCam: BCCFace.SwiftyCamViewController)
  public func swiftyCamSessionDidStartRunning(_ swiftyCam: BCCFace.SwiftyCamViewController)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didTake photo: UIKit.UIImage)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didBeginRecordingVideo camera: BCCFace.SwiftyCamViewController.CameraSelection)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFinishRecordingVideo camera: BCCFace.SwiftyCamViewController.CameraSelection)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFinishProcessVideoAt url: Foundation.URL)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFailToRecordVideo error: any Swift.Error)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didSwitchCameras camera: BCCFace.SwiftyCamViewController.CameraSelection)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didFocusAtPoint point: CoreFoundation.CGPoint)
  public func swiftyCam(_ swiftyCam: BCCFace.SwiftyCamViewController, didChangeZoomLevel zoom: CoreFoundation.CGFloat)
  public func swiftyCamDidFailToConfigure(_ swiftyCam: BCCFace.SwiftyCamViewController)
  public func swiftyCamNotAuthorized(_ swiftyCam: BCCFace.SwiftyCamViewController)
}
public struct FaceDetectionParameters {
  public init(headAngleYRange: Swift.ClosedRange<Swift.Float>, headAngleZRange: Swift.ClosedRange<Swift.Float>, leftEyeOpenProbabilityRange: Swift.ClosedRange<Swift.Float>, rightEyeOpenProbabilityRange: Swift.ClosedRange<Swift.Float>, smilingProbabilityRange: Swift.ClosedRange<Swift.Float>)
}
public enum LivenessChecks {
  case smileDetection
  case headRotationLeft
  case headRotationRight
  case headRotationRandom
  public static func == (a: BCCFace.LivenessChecks, b: BCCFace.LivenessChecks) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LivenessParameters {
  public init(liveness: [BCCFace.LivenessChecks])
}
public enum BCCLanguages : Swift.String {
  case ptBR
  case enUS
  case esMX
  case deviceLanguage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SpeechSettings {
  public let volume: Swift.Float
  public let startsMuted: Swift.Bool
  public let pitch: Swift.Float
  public let speed: Swift.Float
  public init(volume: Swift.Float = 1.0, startsMuted: Swift.Bool = true, pitch: Swift.Float = 1.0, speed: Swift.Float = 0.5)
  public static let defaultSpeechSettings: BCCFace.SpeechSettings
}
public enum CameraType : Swift.String {
  case front
  case back
  public var reversed: BCCFace.CameraType {
    get
  }
  public var asSwiftyCamCameraSelection: BCCFace.SwiftyCamViewController.CameraSelection {
    get
  }
  public var asAVCaptureDevicePosition: AVFoundation.AVCaptureDevice.Position {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CameraSettings {
  public var cameraType: BCCFace.CameraType {
    get
  }
  public let switchable: Swift.Bool
  public init(cameraType: BCCFace.CameraType, switchable: Swift.Bool)
  public static let frontOnly: BCCFace.CameraSettings
  public static let backOnly: BCCFace.CameraSettings
  public static let frontSwitchable: BCCFace.CameraSettings
  public static let backSwitchable: BCCFace.CameraSettings
  public static let defaultCameraSettings: BCCFace.CameraSettings
}
public enum HeadRotationCheck {
  case randomRotation, leftRotation, rightRotation
  public static func == (a: BCCFace.HeadRotationCheck, b: BCCFace.HeadRotationCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SwiftyCamVideoGravity {
  case resize
  case resizeAspect
  case resizeAspectFill
  public static func == (a: BCCFace.SwiftyCamVideoGravity, b: BCCFace.SwiftyCamVideoGravity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PreviewView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setVideoGravity(gravity: BCCFace.SwiftyCamVideoGravity)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
}
public protocol SwiftyCamButtonDelegate : AnyObject {
  func buttonWasTapped()
  func buttonDidBeginLongPress()
  func buttonDidEndLongPress()
  func longPressDidReachMaximumDuration()
  func setMaxiumVideoDuration() -> Swift.Double
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwiftyCamButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any BCCFace.SwiftyCamButtonDelegate)?
  @_Concurrency.MainActor(unsafe) public var buttonEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct BCCFaceAnalytics : Swift.Codable, Swift.CustomStringConvertible {
  public typealias Long = Swift.Int64
  public typealias TimeValue = BCCFace.BCCFaceAnalytics.Long
  public enum CaptureStatus : Swift.String, Swift.Codable {
    case SUCCESS
    case ABORTED
    case EXECUTING
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var description: Swift.String {
    get
  }
  public var version: Swift.String
  public var total_capture_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var capture_status: BCCFace.BCCFaceAnalytics.CaptureStatus {
    get
  }
  public var restart_count: Swift.Int {
    get
  }
  public var timeout_capture: Swift.Bool {
    get
  }
  public var face_lost_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var smile_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var stop_smiling_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var open_eyes_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var fix_position_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var too_close_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var fix_rotation_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var remain_position_msg_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public var inactive_time: BCCFace.BCCFaceAnalytics.TimeValue {
    get
  }
  public func asJSON(encoding: Swift.String.Encoding = String.Encoding.utf8) -> Swift.String?
  public static func convertSystemTimestamp(timestampInSeconds time: Foundation.TimeInterval) -> BCCFace.BCCFaceAnalytics.TimeValue
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LivenessDetectionCreator {
  @available(*, deprecated, message: "Create a LivenessDetectionViewController directly instead (do not forget to set its delegate).")
  public static func create(delegate: any BCCFace.LivenessDetectionViewControllerDelegate, with livenessParameters: BCCFace.LivenessParameters, detectionParameters: BCCFace.FaceDetectionParameters?, speechSettings: BCCFace.SpeechSettings?, language: BCCFace.BCCLanguages?) -> BCCFace.LivenessDetectionViewController
  @objc deinit
}
public struct BCCFaceReturnData {
  public var photo: UIKit.UIImage {
    get
  }
  public var croppedPhoto: UIKit.UIImage? {
    get
  }
}
extension BCCFace.LivenessDetectionViewController.FaceFeedbackState : Swift.Equatable {}
extension BCCFace.LivenessDetectionViewController.FaceFeedbackState : Swift.Hashable {}
extension BCCFace.LivenessDetectionViewController.FaceFeedbackState : Swift.RawRepresentable {}
extension BCCFace.SwiftyCamViewController.CameraSelection : Swift.Equatable {}
extension BCCFace.SwiftyCamViewController.CameraSelection : Swift.Hashable {}
extension BCCFace.SwiftyCamViewController.CameraSelection : Swift.RawRepresentable {}
extension BCCFace.SwiftyCamViewController.FlashMode : Swift.Equatable {}
extension BCCFace.SwiftyCamViewController.FlashMode : Swift.Hashable {}
extension BCCFace.SwiftyCamViewController.VideoQuality : Swift.Equatable {}
extension BCCFace.SwiftyCamViewController.VideoQuality : Swift.Hashable {}
extension BCCFace.LivenessChecks : Swift.Equatable {}
extension BCCFace.LivenessChecks : Swift.Hashable {}
extension BCCFace.BCCLanguages : Swift.Equatable {}
extension BCCFace.BCCLanguages : Swift.Hashable {}
extension BCCFace.BCCLanguages : Swift.RawRepresentable {}
extension BCCFace.CameraType : Swift.Equatable {}
extension BCCFace.CameraType : Swift.Hashable {}
extension BCCFace.CameraType : Swift.RawRepresentable {}
extension BCCFace.HeadRotationCheck : Swift.Equatable {}
extension BCCFace.HeadRotationCheck : Swift.Hashable {}
extension BCCFace.SwiftyCamVideoGravity : Swift.Equatable {}
extension BCCFace.SwiftyCamVideoGravity : Swift.Hashable {}
extension BCCFace.BCCFaceAnalytics.CaptureStatus : Swift.Equatable {}
extension BCCFace.BCCFaceAnalytics.CaptureStatus : Swift.Hashable {}
extension BCCFace.BCCFaceAnalytics.CaptureStatus : Swift.RawRepresentable {}
